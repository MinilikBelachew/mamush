// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Passenger {
  id                   String  @id @default(uuid())
  name                 String
  isDirect             Boolean
  estimatedDurationMin Int?

  earliestPickupTime  DateTime?
  latestPickupTime    DateTime?
  earliestDropoffTime DateTime?
  latestDropoffTime   DateTime?

  pickupStreetNumber String?
  pickupStreet       String?
  pickupCity         String?
  pickupZip          String?

  dropoffStreetNumber String?
  dropoffStreet       String?
  dropoffCity         String?
  dropoffZip          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments Assignment[]
}

model Driver {
  id            String  @id @default(uuid())
  name          String
  phone         String  @unique
  licenseNumber String?
  vehicleType   String?
  plateNumber   String? @unique
  isAvailable   Boolean @default(true)

  homeBaseLat Float?
  homeBaseLng Float?

  lastKnownLat Float?
  lastKnownLng Float?
  lastUpdated  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments Assignment[]
}

model Assignment {
  id          String @id @default(uuid())
  driverId    String
  passengerId String

  assignedAt  DateTime  @default(now())
  completedAt DateTime?

  // Relations
  driver    Driver    @relation(fields: [driverId], references: [id])
  passenger Passenger @relation(fields: [passengerId], references: [id])
}
